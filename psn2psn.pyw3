#!/usr/bin/python3

from requests import  *
from tkinter import  *
from tkinter import filedialog
from tkinter import messagebox
import operator
import re
import sys
import time
#Version mit Splashscreen und Hilfsbox 23.2.16

#!/usr/bin/python3

from requests import  *
from tkinter import  *
from tkinter import filedialog
from tkinter import messagebox

import sys
import time

class App:


    def __init__(self, master):
        self.myList = []   
        self.outList = []
        self.recentfile = ""
        self.meldung = StringVar()
        self.holen = StringVar()
        self.times = IntVar()
        self.times.set = 1
        self.meldung.set( "    ")
        self.title="Psn to Psn"
        self.button = Button(master, text="QUIT",command=master.quit)
        self.messageErgebnis = Message(master,relief=SUNKEN, fg="red",width= 250, text="Übersetzung von psn-Dateien (Shogi)")
        self.messageMeldung = Message(master, relief=SUNKEN, textvariable=self.meldung,  text="                 ", fg ="red",  width=250)
        #self.checkButton = Checkbutton(master, relief=SUNKEN,  variable= self.times,  text="Datei mit Zeiten").grid(column=1,  row= 4)
        self.messageMeldung.grid(column=1,  row=3,  sticky = E,  padx= 5)
        self.messageErgebnis.grid(column=1,  row =0)
        self.button.grid(column=5,  row=5,  padx=5,  pady = 5)
                 #Menu       
        self.menubar = Menu(root)
        self.helpmenu = Menu(self.menubar,  tearoff=1)
        self.helpmenu.add_command(labe='Info',  command=self.box)
        self.filemenu = Menu(self.menubar, tearoff=0)
        self.filemenu.add_command(label="Open" ,command=self.einlesen)
        self.filemenu.add_command(label="Save", command=self.ausgeben)
        self.filemenu.add_separator()
        self.filemenu.add_command(label="Quit!", command=root.quit)
        self.menubar.add_cascade(label="File", menu=self.filemenu)
        self.menubar.add_cascade(label="Help", menu=self.helpmenu)

        root.config(menu=self.menubar)   
   
    def checkmenu(self):
            if self.filemenu.entrycget(1,"state")=="normal" and self.outList==[]:
                self.filemenu.entryconfig(1,state=DISABLED)
                self.filemenu.entryconfig(1,label="-----")
            else:
                self.filemenu.entryconfig(1,state=NORMAL)
                self.filemenu.entryconfig(1,label="Save")   
    def box(self):
                messagebox.showinfo("psn2psn", "Schreibt psn-Files in von gShogi verdaubares Format.Getestet\
                 mit einer ganzen Reihe von Formaten! bw 2017", icon='info')

    def einlesen(self):
        Sel = 0
        self.checkmenu()
        hole = filedialog.askopenfilename(title = "Ausgangsfile")
        f = open(hole,"r")
        self.meldung.set("neu:  " + hole )
        line = ""
        self.outList=[]
        self.myList=[]
        last = 0
        lastwasheader = 0
        self.warn = ""
        line2 = ""
        fd = False
        item1=""
        line2 = ""
        for line in f:
                self.myList.append(line)
        f.close()
        # Kommentare in Zeilen umbrechen
        self.outList=[]
        for line in self.myList:
#                #listk =list(filter(None, re.split("[\[,\],\{,\}]", line)))
                #listk = re.split("[\[,\],\{,\}]", line) # fischt auch kommas etc raus
                listk = line.split()
                line2 = ""
                line1 = ""
                listem = []
                found = False
                for item in listk:
                        if item.find("[")>=0 or item.find("{")>=0: 
                                k= item.find("[")
                                if k <0:
                                        k= item.find("{")
                                if k >0:
                                        line2 = line2 + item[:k-1]+ " "
                                if line2!="":
                                                listem.append(line2)
                                line2 = ""
                                line1 = line1 + item[k:]
                                found = True
                        else:
                                if item.find("]")>=0 or item.find("}")>=0: 
                                        k= item.find("]")
                                        if k <0:
                                                k= item.find("}")
                                        if k>0:
                                                line1 = line1 + item[:k+1] 
                                        if line1 !="":
                                                listem.append(line1)
                                        line1 = ""
                                        found = False
                                        line2 = line2 + item[k+1:]+ " "
                                else:
                                        if found == True:
                                                line1 = line1 +item +" "
                                        else:
                                                line2 = line2 + item+ " "
                if line2!="":
                        listem.append(line2)
              
                for item1 in listem:
                        self.outList.append(item1)
        self.myList = self.outList
        self.outList=[]
       
        # Ausrufezeichen unterdrücken!
        for line in self.myList:
                line = line.strip()
                line1 = ""
                line2 = ""
                if line != "":
                        k=1
                        # Ausrufungszeichen und Fragezeichen unterdrücken
                        while k >0:
                                k = line.find("!")
                                if k > 0:
                                        line = line[0:k]+" "+line[k+1:]
                        k=1
                        while k >0:
                                k = line.find("?")
                                if k > 0:
                                        line = line[0:k]+" "+line[k+1:]

                        if line.find("{")==-1 and line.find("[")==-1: 
                                if  line.find("SENTE")!=-1 or line.find("GOTE")!=-1 or line.find("Sente")!=-1 or line.find("Gote")!=-1 or \
                                line.find("Black")!=-1 or line.find("White")!=-1 or line.find("Date:")!=-1 or line.find("Event:")!=-1:
                                                line2 = ("[" + line +"]")
                                if line2.find(" Sente ")!=-1 or line.find(" Gote ")!=-1 or line.find(" Black ")!=-1 or  line.find(" White ")!=-1 :
                                                line2 = "{"+ line2[1:-1] + "}"
                        if  line.find("[")!=-1: 
                                if not(line.find("SENTE")!=-1 or line.find("GOTE")!=-1 or line.find("Sente")!=-1 or line.find("Gote")!=-1 or \
                                line.find("Date:")!=-1 or line.find("Event:")!=-1 or line.find("DATE")!=-1 or line.find("EVENT")!=-1 or line.find("Black")!=-1 or \
                                line.find("White")!=-1 or line.find("BLACK")!=-1 or line.find("WHITE")!=-1):
                                                line2 = ("{" + line[1:-1] +"}")
                                else:
                                        line2 = line
                        if  line.find("{")!=-1: 
                                 line2 =  line
                        if line[0]  not in  ['0', '1', '2', '3', '4','5','6','7', '8', '9']:
                                if len(line) > 180:
                                        k = 0
                                        b = 0
                                        for x in line:
                                                if x ==" ":
                                                        k = k+1
                                                if x in ['0', '1', '2', '3', '4','5','6','7', '8', '9']:
                                                        b = b+1
                                        if k >0:
                                                if b/k >= 1:
                                                        Sel = 5;
                                                        warn="Liste Züge ohne Nummern"
                                                        line2 = line
                                if line.find(";") >= 0:
                                        listk = line.split(";")
                                        line1 =""
                                        line = ""
                                        for line1 in listk:
                                                line = line + " 1. "+ line1
                                        line2 = line
                                        self.warn="Liste Kurzzüge"
                                else:     
                                        if (line[0]!="{" and line[0]!="[") :
                                                if line2 == "":
                                                        line2 = "{"+ line + "}"
                                        #else:
                                          #      line2 = line

                        if line[0]  in  ['0', '1', '2', '3', '4','5','6','7', '8', '9']:
                                if len(line)<4:
                                        line2  = "{"+ line + "}"
                                #Entscheidung, welches Format vorliegt: 1) Einzelzüge mit Nummern 2) Zugli ste ohne Nummerierung 3) Doppelzüge
                                # 5) Einzel oder Doppelzüge mit Zeitangaben
                                #Selektion

                                k = line.find(" ")
                                if k==1:
                                        Sel = 1 

                                #c)
                                k =line.find("..")
                                if k>0:
                                        line1 = line[0:k]
                                        line1 = line1+line[k+2:]
                                else:
                                        line1 = line

                                k = 0
                                m = 0
                                n = 0
                                o = 0
                                p  =0
                                q = 0
                                b = 0
                                r = 0
                                for i in range(0, len(line1)):
                                        if line1[i] in  ['0', '1', '2', '3', '4','5','6','7', '8', '9']:
                                                k = k+1
                                        if line1[i] == ".":
                                                m = m +1
                                        if line1[i] == "-":
                                                n = n+1
                                        if line1[i] == "x":
                                                o = o+1
                                        if line1[i] == "*":
                                                p = p+1
                                        if line1[i] == ":":  #möglicherweise nicht nötig
                                                q = q+1
                                        if line1[i] == " ":
                                                b = b +1
                                        if line1[i] == "/":
                                                r = r +1
                                if Sel ==0:   #--------------------------------Sel erraten
                                        #b)
                                        if len(line)>100 and b/m > 1.7:
                                                Sel = 2
                                        #a)       
                                        if b == 0 and m>0:
                                                Sel = 1
                                        if Sel ==0 and m!=0 and b!=0:
                                                if  b/m == 1:
                                                        Sel = 4
                                                if b/m == 2:
                                                        Sel =3 # Doppelzüge
                                                if b/m == 3:
                                                        Sel = 3   #Doppelzüge weit
                                        if Sel == 0 and m>1 and b==0:
                                                Sel = 3   #provisorisch Doppelzüge eng geschrieben

                                                #a)
                                        if (len(line)<20 and self.times.get()==0 and b ==0 ):
                                                Sel = 1

                                        #d)
                                        if q==4:
                                                self.times.set=1
                                                Sel = 5
                                        if r == 2:
                                                self.times.set=1
                                                Sel = 5
                                        if Sel == 0:
                                                #keine Entscheidung (erfolgt in folgernder Zeile
                                                line2 = "{"+ line + "}"
                                if Sel > 0:  #---------------------------------------------Sel schon gesetzt
                                        line2 = ""
                                        if Sel ==1 and len(line)>20:   #wir haben uns geirrt: es ist doch ein freies Format
                                                if line.find(" ")!=-1 :
                                                        Sel = 3
                                        if  Sel != 5:
                                                if m != 0:
                                                       if  b/m > 3:
                                                        #es handelt sich um einen Kommentar!
                                                        #setzt voraus, dass nicht ZZüge und Kommentar in einer Zeile
                                                                Sel = -Sel

                                        if Sel == 1:
                                                line2 = line[:12]
                                        if Sel == 2:
                                                line2 = line #Dummy
                                        if Sel == 5:  # mit Zeitangagen
                                                if line.find("/")>=0:
                                                        k=line.find("/")
                                                        line = line[:k-2]
                                                else:
                                                        if q == 4:
                                                                k = line.find(":")
                                                                line = line[:k-2]
                                                line2 = line
                                        if Sel == 4:
                                                line2 = line
                                        if (Sel == 3):
                                                line2 = line   #Dummy

                                        if line.find("Resign")!=-1:
                                                line2 = "{"+ line + "}"
                                        if Sel < 0:   #Kommentar
                                                Sel = - Sel
                                                line2 = "{"+ line + "}"
                                        if line2 == "" :                              #Default
                                                line2 = "{"+ line + "}"
                                        if line2[0] not in  ['0', '1', '2', '3', '4','5','6','7', '8', '9',  '{',  '[']:
                                                line2 = "{"+ line + "}"
                                        if line2[0] in ['0', '1', '2', '3', '4','5','6','7', '8', '9'] and line2.find(".") ==-1:
                                                line2 = "{"+ line + "}"
                        self.outList.append(line2)

        self.myList = []
        if Sel ==1: self.warn = " Einzelzüge"
        if Sel ==2: self.warn = " Liste ohne Zugnummern"
        if Sel ==3: self.warn = " freier Text-Kurzzüge"
        if Sel ==4: self.warn = " freier Text, Züge mit Bindestrich"
        if Sel ==5: self.warn = " Züge mit Zeitangaben"

        Kfound = False
        item1 = ""
        for item in self.outList:
                if item!="":
                        if item[0][0] == "{":
                                item1 = item1 + item[1:-1] 
                                Kfound = True
                        else:
                                if Kfound ==True:
                                        Kfound = False
                                        line ="{" + item1 +" }" + "\n"
                                        k = line.find("}}")
                                        if k >=0:
                                                line = line[:-1]
                                        self.myList.append(line) #
                                        item1 = ""
                        if Kfound == False:
                                self.myList.append(item)
                        
        if item1!="":
                self.myList.append("{" + item1+ "}")
        self.outList = self.myList
        self.myList = []
        #Einlesen der Züge in Liste mit Tupeln
        self.tupellist= []
        i = 0
        s = 0
        while  i < len(self.outList):
                if self.outList[i][0]=="{" or self.outList[i][0]=="[":
                        self.tupellist.append(( 0,"", self.outList[i] ))
                else:
                        a = str(self.outList[i][0:3])
                        k=0
                        k = a.find(".")
                        if k != -1:
                                a = a[0:k]
                        try:
                                s = int(a)
#                                print (s)
                        except:
                                s= 0
                        if i <= len(self.outList)-2:
                                if  self.outList[i+1][0]=="{" or self.outList[i+1][0]=="[":
                                        self.tupellist.append((s, self.outList[i],  self.outList[i+1]))
                                        i += 1
#                                        print(self.outList[i])
#                                        print(self.outList[i-1] + "<")
                                else:
                                         self.tupellist.append((s,  self.outList[i] ,"" ))
#                                         print(self.outList[i])
                        else:
                                         self.tupellist.append((s,  self.outList[i] ,"" ))
                i+=1

        #sorted(self.tupellist,  key=lambda x: tuple(x[0]) ) #sort by first entry
        if Sel in [1, 3, 5]:
                self.tupellist=sorted(self.tupellist,  key=operator.itemgetter(0))   
                self.warn = self.warn + "\nProbleme bei: "
                q = 0
                for i in range(0, len(self.tupellist)):
                        if self.tupellist[i][0]>=1:
                                if self.tupellist[i][0]!= q+1:
                                        self.warn = self.warn + str(q) +","
                        q =  self.tupellist[i][0]
                        #print(q)
        #print(self.tupellist)
        self.outList = []
        for tupel in self.tupellist:
                if tupel[1]!="":   
                        self.outList.append(tupel[1])
                if tupel[2]!="":
                        self.outList.append(tupel[2])
        self.tupellist = []
        self.meldung.set( "Datei " +hole + "Typ:"+ self.warn )
        self.checkmenu()


    def ausgeben(self):
        #if self.recentfile == "":
        f=filedialog.asksaveasfilename(title = "Speichern", defaultextension = 'psn')

        file = open(f, "w") # Sicherheitsabfrage!!

        #liste=self.myList.get(0, END)
        for line in self.outList:
                file.write(line+"\n")
        file.close()
        self.outlist=[]
        self.checkmenu()
        #self.outList=[]


        self.meldung.set("gepeichert" + f  + "Typ" + self.warn)







if __name__ == '__main__':
    root = Tk()
    root.wm_title("psn umschreiben")
    app = App(root)
    root.mainloop()




